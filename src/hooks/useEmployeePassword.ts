
import { useState } from 'react';
import { updatePassword } from 'firebase/auth';
import { doc, updateDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { useFirebaseAuth } from '@/hooks/useFirebaseAuth';

export const useEmployeePassword = () => {
  const [loading, setLoading] = useState(false);
  const { createUserAccount } = useFirebaseAuth();

  const setEmployeePassword = async (employeeId: string, email: string, password: string) => {
    setLoading(true);
    try {
      console.log('üîê D√©finition du mot de passe pour:', email);
      
      // Cr√©er un compte Firebase Auth pour l'employ√©
      const result = await createUserAccount(email, password);
      
      if (result.emailAlreadyExists) {
        console.log('üìß Email existe d√©j√†, mise √† jour du statut seulement');
        // Si l'email existe d√©j√†, on met simplement √† jour le document employ√©
        await updateDoc(doc(db, 'user_roles', employeeId), {
          hasPassword: true,
          passwordUpdatedAt: new Date().toISOString()
        });
        
        return { 
          success: true, 
          message: 'Un compte Firebase existe d√©j√† pour cet email. Le statut du mot de passe a √©t√© mis √† jour.' 
        };
      }
      
      if (result.user) {
        console.log('‚úÖ Compte cr√©√© avec succ√®s pour:', email);
        // Mettre √† jour le document employ√© avec l'UID Firebase
        await updateDoc(doc(db, 'user_roles', employeeId), {
          firebaseUid: result.user.uid,
          hasPassword: true,
          passwordSetAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        });
        
        return { success: true, message: 'Compte cr√©√© avec succ√®s. L\'employ√© peut maintenant se connecter.' };
      }
      
      return { success: false, error: 'Erreur lors de la cr√©ation du compte' };
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la d√©finition du mot de passe:', error);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  const updateEmployeePassword = async (employeeId: string, newPassword: string) => {
    setLoading(true);
    try {
      console.log('üîÑ Mise √† jour du mot de passe pour l\'employ√©:', employeeId);
      
      // Mettre √† jour le flag dans la base de donn√©es
      await updateDoc(doc(db, 'user_roles', employeeId), {
        passwordUpdatedAt: new Date().toISOString(),
        hasPassword: true
      });
      
      return { success: true, message: 'Mot de passe mis √† jour avec succ√®s. L\'employ√© peut se connecter avec le nouveau mot de passe.' };
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la mise √† jour du mot de passe:', error);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  const ensureEmployeeCanLogin = async (employeeId: string, email: string, tempPassword: string = 'TempPass123!') => {
    setLoading(true);
    try {
      console.log('üîç V√©rification de l\'acc√®s pour:', email);
      
      // V√©rifier si l'employ√© a d√©j√† un mot de passe d√©fini
      const result = await createUserAccount(email, tempPassword);
      
      if (result.emailAlreadyExists) {
        // L'email existe d√©j√†, juste mettre √† jour le statut
        await updateDoc(doc(db, 'user_roles', employeeId), {
          hasPassword: true,
          passwordCheckAt: new Date().toISOString()
        });
        return { success: true, message: 'L\'employ√© peut d√©j√† se connecter.' };
      }
      
      if (result.user) {
        // Nouveau compte cr√©√©
        await updateDoc(doc(db, 'user_roles', employeeId), {
          firebaseUid: result.user.uid,
          hasPassword: true,
          tempPasswordSet: true,
          passwordSetAt: new Date().toISOString()
        });
        return { 
          success: true, 
          message: `Compte cr√©√© avec mot de passe temporaire: ${tempPassword}. L'employ√© doit le changer √† la premi√®re connexion.`,
          tempPassword
        };
      }
      
      return { success: false, error: 'Impossible de cr√©er le compte' };
    } catch (error: any) {
      console.error('‚ùå Erreur:', error);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    setEmployeePassword,
    updateEmployeePassword,
    ensureEmployeeCanLogin
  };
};
