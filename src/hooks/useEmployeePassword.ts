
import { useState } from 'react';
import { sendPasswordResetEmail } from 'firebase/auth';
import { doc, updateDoc } from 'firebase/firestore';
import { db, auth } from '@/lib/firebase';
import { useFirebaseAuth } from '@/hooks/useFirebaseAuth';

export const useEmployeePassword = () => {
  const [loading, setLoading] = useState(false);
  const { createUserAccount } = useFirebaseAuth();

  const setEmployeePassword = async (employeeId: string, email: string, password: string) => {
    setLoading(true);
    try {
      console.log('üîê Configuration du compte pour:', email);
      
      // D'abord essayer de cr√©er un nouveau compte
      const result = await createUserAccount(email, password);
      
      if (result.emailAlreadyExists) {
        console.log('üìß Email existe d√©j√†, envoi d\'un email de r√©initialisation');
        
        try {
          // Envoyer un email de r√©initialisation de mot de passe
          await sendPasswordResetEmail(auth, email);
          console.log('‚úÖ Email de r√©initialisation envoy√© avec succ√®s');
          
          // Mettre √† jour le document employ√©
          await updateDoc(doc(db, 'user_roles', employeeId), {
            hasPassword: true,
            passwordResetSent: true,
            passwordResetSentAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          });
          
          return { 
            success: true, 
            message: `Un email de r√©initialisation de mot de passe a √©t√© envoy√© √† ${email}. Le propri√©taire peut maintenant d√©finir son nouveau mot de passe en cliquant sur le lien dans l'email.`,
            resetEmailSent: true
          };
        } catch (resetError: any) {
          console.error('‚ùå Erreur lors de l\'envoi de l\'email de r√©initialisation:', resetError);
          
          // M√™me si l'envoi √©choue, on met √† jour le statut
          await updateDoc(doc(db, 'user_roles', employeeId), {
            hasPassword: false,
            passwordResetAttempted: true,
            passwordResetError: resetError.message,
            updatedAt: new Date().toISOString()
          });
          
          return { 
            success: false, 
            error: `Impossible d'envoyer l'email de r√©initialisation: ${resetError.message}. Veuillez v√©rifier que l'adresse email est correcte.`
          };
        }
      }
      
      if (result.user) {
        console.log('‚úÖ Nouveau compte cr√©√© avec succ√®s pour:', email);
        // Mettre √† jour le document employ√© avec l'UID Firebase
        await updateDoc(doc(db, 'user_roles', employeeId), {
          firebaseUid: result.user.uid,
          hasPassword: true,
          passwordSetAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        });
        
        return { success: true, message: 'Compte cr√©√© avec succ√®s. Le propri√©taire peut maintenant se connecter.' };
      }
      
      return { success: false, error: 'Erreur lors de la cr√©ation du compte' };
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la configuration du compte:', error);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  const updateEmployeePassword = async (employeeId: string, newPassword: string) => {
    setLoading(true);
    try {
      console.log('üîÑ Mise √† jour du mot de passe pour l\'employ√©:', employeeId);
      
      // Mettre √† jour le flag dans la base de donn√©es
      await updateDoc(doc(db, 'user_roles', employeeId), {
        passwordUpdatedAt: new Date().toISOString(),
        hasPassword: true
      });
      
      return { success: true, message: 'Mot de passe mis √† jour avec succ√®s. L\'employ√© peut se connecter avec le nouveau mot de passe.' };
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la mise √† jour du mot de passe:', error);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  const sendPasswordReset = async (email: string) => {
    setLoading(true);
    try {
      console.log('üìß Envoi d\'un email de r√©initialisation pour:', email);
      
      await sendPasswordResetEmail(auth, email);
      
      return { 
        success: true, 
        message: `Un email de r√©initialisation de mot de passe a √©t√© envoy√© √† ${email}.`
      };
    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'envoi de l\'email:', error);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  const ensureEmployeeCanLogin = async (employeeId: string, email: string, tempPassword: string = 'TempPass123!') => {
    setLoading(true);
    try {
      console.log('üîç V√©rification de l\'acc√®s pour:', email);
      
      // V√©rifier si l'employ√© a d√©j√† un mot de passe d√©fini
      const result = await createUserAccount(email, tempPassword);
      
      if (result.emailAlreadyExists) {
        // L'email existe d√©j√†, envoyer un email de r√©initialisation
        await sendPasswordResetEmail(auth, email);
        await updateDoc(doc(db, 'user_roles', employeeId), {
          hasPassword: true,
          passwordResetSent: true,
          passwordCheckAt: new Date().toISOString()
        });
        return { 
          success: true, 
          message: 'Un email de r√©initialisation a √©t√© envoy√© au propri√©taire pour qu\'il puisse d√©finir son mot de passe.',
          resetEmailSent: true
        };
      }
      
      if (result.user) {
        // Nouveau compte cr√©√©
        await updateDoc(doc(db, 'user_roles', employeeId), {
          firebaseUid: result.user.uid,
          hasPassword: true,
          tempPasswordSet: true,
          passwordSetAt: new Date().toISOString()
        });
        return { 
          success: true, 
          message: `Compte cr√©√© avec mot de passe temporaire: ${tempPassword}. Le propri√©taire doit le changer √† la premi√®re connexion.`,
          tempPassword
        };
      }
      
      return { success: false, error: 'Impossible de cr√©er le compte' };
    } catch (error: any) {
      console.error('‚ùå Erreur:', error);
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    setEmployeePassword,
    updateEmployeePassword,
    sendPasswordReset,
    ensureEmployeeCanLogin
  };
};
